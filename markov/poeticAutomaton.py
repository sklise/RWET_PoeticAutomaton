#!/usr/bin/python
# http://mathworld.wolfram.com/ElementaryCellularAutomaton.html

# A cellular automaton poem of 8 columns, contents of each cell is generated by n-gram Markov chain with n={1,2,3}


import sys, re, random
from markov import MarkovGenerator
# sys.argv[self,text,gens,ruleset]

cellrules = {\
	10	: [0,0,0,0,1,0,1,0],\
	11	: [0,0,0,0,1,0,1,1],\
	12	: [0,0,0,0,1,1,0,0],\
	13	: [0,0,0,0,1,1,0,1],\
	14	: [0,0,0,0,1,1,1,0],\
	15	: [0,0,0,0,1,1,1,1],\
	16	: [0,0,0,1,0,0,0,0],\
	17	: [0,0,0,1,0,0,0,1],\
	18	: [0,0,0,1,0,0,1,0],\
	19	: [0,0,0,1,0,0,1,1],\
	20	: [0,0,0,1,0,1,0,0],\
	21	: [0,0,0,1,0,1,0,1],\
	22	: [0,0,0,1,0,1,1,0],\
	23	: [0,0,0,1,0,1,1,1],\
	24	: [0,0,0,1,1,0,0,0],\
	25	: [0,0,0,1,1,0,0,1],\
	26	: [0,0,0,1,1,0,1,0],\
	27	: [0,0,0,1,1,0,1,1],\
	28	: [0,0,0,1,1,1,0,0],\
	29	: [0,0,0,1,1,1,0,1],\
	30	: [0,0,0,1,1,1,1,0],\
	54	: [0,0,1,1,0,1,1,0],\
	60	: [0,0,1,1,1,1,0,0],\
	62	: [0,0,1,1,1,1,1,0],\
	102	: [0,1,1,0,0,1,1,0],\
	126	: [0,1,1,1,1,1,1,0],\
	188	: [1,0,1,1,1,1,0,0]\
}

generator = MarkovGenerator(n=3,max=2)
for line in sys.stdin:
	line = line.lower()
	line = line.strip()
	generator.feed(line)
	# print line

def wordFromRule(lines,j):
	if j > 0:
		m = generator.generate(lines,j)
		m = m.split(" ")
		return m[len(m)-1]
	else:
		return ""

def newgen(x, y, rule):
	parentgen = grid[y-1]
	try: # Determine the parents.
		parent = grid[y-1]
		try:
			p1 = parent[x-1]
		except IndexError:
			p1 = ' '
		try:
			p2 = parent[x]
		except IndexError:
			p2 = ' '
		try:
			p3 = parent[x+1]
		except IndexError:
			p3 = ' '
	except IndexError:
		print "index error"
	
	if p1 is not ' ' and p2 is not ' ' and p3 is not ' ' and rule[0]:
		print "0"
		return wordFromRule([p1,p2,p3],3)
	elif p1 is not ' ' and p2 is not ' ' and p3 is ' ' and rule[1]:
		print "1"
		return wordFromRule([p1,p2],2)
	elif p1 is not ' ' and p2 is ' ' and p3 is not ' ' and rule[2]:
		print "2"
		return wordFromRule([p1,p3],2)
	elif p1 is not ' ' and p2 is ' ' and p3 is ' ' and rule[3]:
		print "3"
		return wordFromRule([p1],1)
	elif p1 is ' ' and p2 is not ' ' and p3 is not ' ' and rule[4]:
		print "4"
		return wordFromRule([p2,p3],2)
	elif p1 is ' ' and p2 is not ' ' and p3 is ' ' and rule[5]:
		print "5"
		return wordFromRule([p2],1)
	elif p1 is ' ' and p2 is ' ' and p3 is not ' ' and rule[6]:
		print "6"
		return wordFromRule([p3],1)
	else:
		return ' '

grid = [] # Make a grid to hold the poem.
for i in xrange(10):
	if i is 0:
		gridline = [" ","how"," ","am"," "," ","mayo","not","myself?",""]
	else:
		gridline = []
		for j in xrange(10):
			gridline.append(newgen(j,i,cellrules[30]))
	grid.append(gridline)

for row in grid: # PRINTING!
	for word in row:
		print '%-12s' % word,
	print""